package com.day1;

public class TrappingRainWater_2 {
	//O(N)
	public static int left_max(int[] arr, int n, int i){
		int left_max = 0;
		for(int j = 0; j <= i; j++){
			if(arr[j] > left_max)
				left_max = arr[j];
		}
		return left_max;
	}
	
	//O(N)
	public static int right_max(int[] arr, int n, int i){
		int right_max = 0;
		for(int j = n-1; j >= i ; j--){
			if(arr[j] > right_max  )
				right_max = arr[j];
		}
		return right_max;
	}
	
	//O(N * N)
	public static int trappedWater_bruteforce(int[] arr, int n){
		int ans = 0;
		for(int i = 1; i < n-1; i++){
			ans = ans + Math.min(left_max(arr,n,i), right_max(arr,n,i)) - arr[i];
		}
		return ans;
	}
	
	//========================== Maintain the leftmax, rightmax array
	//TC: O(N) * O(1) = O(N), SC: O(N) for the array
	public static int trappedWater_efficient(int[] arr, int n){
		int ans = 0;
		int[] left_max = new int[n];
		int[] right_max = new int[n];
		
		//Only one time computation of array - O(N)
		left_max[0] = arr[0];
		for(int i = 1; i < n; i++){
			left_max[i] = Math.max(left_max[i-1],arr[i]);
		}
		
		right_max[n-1] = arr[n-1];
		for(int i = n-2; i >= 0; i--){
			right_max[i] = Math.max(right_max[i+1],arr[i]);
		}
		
		//for loop O(N) = > TC: O(N)
		for(int i = 1; i < n-1; i++){
			//accessing array elements take O(1)
			ans = ans + Math.min(left_max[i], right_max[i]) - arr[i];
		}
		return ans;
	}
	
	//======================== Maintain the variable instead of array
	//TC: O(N) * O(1) = O(N), SC: O(1) for the variable
	public static int trappedWater_super_efficient(int[] arr, int n){
		int ans = 0;
				
		int var_left_max = arr[0];
		int var_right_max = arr[n-1];
		for(int i = 1; i < n-1; i++){
			var_left_max = Math.max(var_left_max, arr[i]);
			var_right_max = Math.max(var_right_max, arr[i]);
			ans = ans + Math.min(var_left_max, var_right_max) - arr[i];
		}
		return ans;
	}
	
	
	public static void main(String[] args) {
	/*	int arr[] = {4,0,0,4,0,0};//{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
		//int ans = trappedWater_bruteforce(arr, arr.length);
		//int ans = trappedWater_efficient(arr, arr.length);
		int ans = trappedWater_super_efficient(arr, arr.length);
		if(ans <= 0)
			System.out.println("No trapped water " + ans);
		else
		 System.out.println(ans);*/
		
		System.out.println(digitsInFactorial(1, 2, 1));
		
	}
	
	
	public static double digitsInFactorial(int A, int B,int N)
    {
		double gp = 0;
	    if(N == 1)
	    return A;
	    if(N == 2)
	    return B;
	    if(N > 2)
	        gp = A*(Math.pow(B,N-1));
	    
	    return gp;
    }
	
}
