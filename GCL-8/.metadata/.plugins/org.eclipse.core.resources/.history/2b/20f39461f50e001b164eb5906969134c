package com.day6;

import java.util.ArrayDeque;
import java.util.Deque;

public class DequeueOperations {
	static Deque<Integer> dq = new ArrayDeque<Integer>();
	
	//Bruteforce - O(N*N)
	public static void maxElement(int[] arr, int k){
		int n = arr.length;
		for(int i = 0; i < n; i++){
			int ans = 0;
			for(int j = i; j < i+k && i+k-1 < n; j++){
				ans = Math.max(ans, arr[j]);
			}
			if(i+k-1 < n)
			System.out.println(ans);
		}
	}
	
	/*//Optimize - O(N) - NOT WORKING
	public static void maxElementOptimize(int[] arr, int k){
		int n = arr.length;
		int l = 0;
		int r = k;
		int i = 0;
		while(i < n && l < r && l < n && r < n){
			while(!dq.isEmpty() && i != r-1){
				int x = dq.peekLast();
				if(arr[i] > arr[x]){
					
					dq.pollLast();
				}
			}
			dq.addLast(i);
			if(i == r-1){
				l++;
				r++;
				i=l-1;
				System.out.println(arr[dq.pollFirst()]);
			}
			i++;
		}
	}*/
	
	//Optimize - O(N) - NOT WORKING
	public static void maxElementOptimize(int[] arr, int k){
		int n = arr.length;
		int i ;
		for(i = 0; i < k; i++){
			while(!dq.isEmpty() && arr[i] > arr[dq.peekLast()]){
				dq.removeLast();
			}
			dq.addLast(i);
		}
		System.out.println(arr[dq.peekFirst()]);
		
		for(; i < n; i++){
			if(dq.peekFirst() == i-k){
				dq.removeFirst();
			while(!dq.isEmpty() && arr[i] > arr[dq.peekLast()]){
				dq.removeLast();
			}
			dq.addLast(i);
			System.out.println(arr[dq.peekFirst()]);
			}
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[] = {4,5,3,7,4,8};
		int k = 3;
		maxElementOptimize(arr,k);
	}

}
